연산자
	1. 산술 연산자
		- 사칙연산 : +, -, *, /, %(나머지)
		
	2. 문자 결합 연산자(+)
		"연희" + "직업전문학교" --> "연희직업전문학교";
		
	3. 대입연산자(=)
		var a = 1;
			- 1의 값을  a라는 변수에 대입(저장)한다.
			- 오른쪽 값을 왼쪽에 대입(저장)한다.

	
	4. 복합대입연산자
		(산술연산자 + 대입연산자가 축약된 표현)
		
		var a = 1;
		var b = 2;
		a = a + b;
			-> (a = a + b;) = (a + = b;)
			-> (a = a * b;) = (a * = b;)
			
	5. 증감연산자
		- 증가, 감소와 관련된 연산자
		
		<증가>
		var a = 1;
		a = a + 1; // a = 2; --> a++;
		a = a + 1; // a = 3; --> a++;
		a = a + 1; // a = 4; --> a++;
	
		<감소>
		var a = 10;
		a = a - 1; // a = 9 --> a--;
		a = a - 1; // a = 8 --> a--;
		a = a - 1; // a = 7 --> a--;
		
		++a; // a++;
			var b = ++a; -> 연산 후 대입(a = a+1; -> b=a;)
			var b = a++; -> 대입 후 연산(b=a; -> a=a+1;)
			
 
	예) 2씩 증가(복합 대입 연산자)
		- a = a + 2; // a + = 2;
		
		
		
	6. 비교 연산자
		두 값을 비교
		크다, 크거나 같다, 작다, 작거나 같다, 같다, 다르다
		A > B   A >= B     A < B    A <= B   A == B  !=
		
		논리값 -> true, false
		
		
		같다
			- 값이 같다(==)
				예) 1000 == "1000" --> true(자료형이 달라도 값이 같으면 true)
				
			- 값 + 자료형이 같다(===)
				예) 1000 === "1000" --> false(자료형, 값 모두 같아야 true)
				
		다르다
			- 값이 다르다(!=)
			- 값이 다르거나 자료형이 다르다(!==)
			
			
	7. 논리 연산자
	
		ㅣㅣ	- or 연산자(합집합) -> 비교 대상 중 하나라도 true이면 true
				- 모두 false여야 false
				true 조건인 값을 반환
				(논리값 반환 X)
				
				false로 인식하는 조건
					- 논리값 false, 0, ''(빈값), null, undefined
					
				trun로 인식하는 조건
					- false로 인식하는 조건을 제외한 모든 값
					
				참1 ㅣㅣ 참2 --> 참1 반환	
				
				
				
		&& 		- and 연산자(교집합) -> 비교 대상 중 모두가 true이면 true(한개라도 false이면 false)
		
				참1 && 참2 --> 참2 반환
		
		
		
		!		- NOT 연산자(부정)
					true --> false, false --> true
						
				
		
	8. 삼항조건연산자
		- 단항(1항) 
			- 연산 대상이 1개			
			- 증감 연산자(a++; a--;)
			- 논리 부정(!a;)
			- 복합 대입 연산자(a+=2;)
					
		- 이항(2항) - 연산 대상이 2개
			- a + b;
			- a * b;
			
		- 삼항(3항)
				1항      2항         3항
			(조건식) ? true 값 : false 때 값;
				-> 조건식이 true이면 true일 때 값(왼쪽) 반환
				-> 조건식이 false이면 false일 때 값(오른쪽) 반환
					예) (1000>100)?"크다":"작다";  -> "크다"
		
	
	9. 연산자의 우선순위
		1) ()
		2) 단항 연산자 : 1 + a++; // ++a,b--;
		3) 산술연산자(+,-,/,*,%)
		4) 비교 연산자
		5) 논리
		6) 대입 : var a = b + a;  ---> 우선순위가 가장 낮다